// @generated by protoc-gen-es v2.2.5 with parameter "target=ts"
// @generated from file bearclaw/aip/v1/fieldbehavior.proto (package bearclaw.aip.v1, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import { file_google_api_field_behavior } from "../../../google/api/field_behavior_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file bearclaw/aip/v1/fieldbehavior.proto.
 */
export const file_bearclaw_aip_v1_fieldbehavior: GenFile = /*@__PURE__*/
  fileDesc("CiNiZWFyY2xhdy9haXAvdjEvZmllbGRiZWhhdmlvci5wcm90bxIPYmVhcmNsYXcuYWlwLnYxIoIjChFUZXN0RmllbGRCZWhhdmlvchIOCgZub3JtYWwYASABKAkSFwoKaWRlbnRpZmllchgCIAEoCUID4EEIEhYKCWltbXV0YWJsZRgDIAEoCUID4EEFEhcKCmlucHV0X29ubHkYBCABKAlCA+BBBBIVCghvcHRpb25hbBgFIAEoCUID4EEBEhgKC291dHB1dF9vbmx5GAYgASgJQgPgQQMSFQoIcmVxdWlyZWQYByABKAlCA+BBAhIbCg51bm9yZGVyZWRfbGlzdBgIIAEoCUID4EEGEiAKE3JlcGVhdGVkX2lkZW50aWZpZXIYCSADKAlCA+BBCBIfChJyZXBlYXRlZF9pbW11dGFibGUYCiADKAlCA+BBBRIgChNyZXBlYXRlZF9pbnB1dF9vbmx5GAsgAygJQgPgQQQSHgoRcmVwZWF0ZWRfb3B0aW9uYWwYDCADKAlCA+BBARIhChRyZXBlYXRlZF9vdXRwdXRfb25seRgNIAMoCUID4EEDEh4KEXJlcGVhdGVkX3JlcXVpcmVkGA4gAygJQgPgQQISJAoXcmVwZWF0ZWRfdW5vcmRlcmVkX2xpc3QYDyADKAlCA+BBBhI4Cgxub3JtYWxfY2hpbGQYECABKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3ISQQoQaWRlbnRpZmllcl9jaGlsZBgRIAEoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvckID4EEIEkAKD2ltbXV0YWJsZV9jaGlsZBgSIAEoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvckID4EEFEkEKEGlucHV0X29ubHlfY2hpbGQYEyABKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3JCA+BBBBI/Cg5vcHRpb25hbF9jaGlsZBgUIAEoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvckID4EEBEkIKEW91dHB1dF9vbmx5X2NoaWxkGBUgASgLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yQgPgQQMSPwoOcmVxdWlyZWRfY2hpbGQYFiABKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3JCA+BBAhJFChR1bm9yZGVyZWRfbGlzdF9jaGlsZBgXIAEoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvckID4EEGEkEKFXJlcGVhdGVkX25vcm1hbF9jaGlsZBgYIAMoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvchJKChlyZXBlYXRlZF9pZGVudGlmaWVyX2NoaWxkGBkgAygLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yQgPgQQgSSQoYcmVwZWF0ZWRfaW1tdXRhYmxlX2NoaWxkGBogAygLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yQgPgQQUSSgoZcmVwZWF0ZWRfaW5wdXRfb25seV9jaGlsZBgbIAMoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvckID4EEEEkgKF3JlcGVhdGVkX29wdGlvbmFsX2NoaWxkGBwgAygLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yQgPgQQESSwoacmVwZWF0ZWRfb3V0cHV0X29ubHlfY2hpbGQYHSADKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3JCA+BBAxJIChdyZXBlYXRlZF9yZXF1aXJlZF9jaGlsZBgeIAMoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvckID4EECEk4KHXJlcGVhdGVkX3Vub3JkZXJlZF9saXN0X2NoaWxkGB8gAygLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yQgPgQQYSRQoKbWFwX25vcm1hbBggIAMoCzIxLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBOb3JtYWxFbnRyeRJSCg5tYXBfaWRlbnRpZmllchghIAMoCzI1LmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBJZGVudGlmaWVyRW50cnlCA+BBCBJQCg1tYXBfaW1tdXRhYmxlGCIgAygLMjQuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yLk1hcEltbXV0YWJsZUVudHJ5QgPgQQUSUQoObWFwX2lucHV0X29ubHkYIyADKAsyNC5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3IuTWFwSW5wdXRPbmx5RW50cnlCA+BBBBJOCgxtYXBfb3B0aW9uYWwYJCADKAsyMy5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3IuTWFwT3B0aW9uYWxFbnRyeUID4EEBElMKD21hcF9vdXRwdXRfb25seRglIAMoCzI1LmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBPdXRwdXRPbmx5RW50cnlCA+BBAxJOCgxtYXBfcmVxdWlyZWQYJiADKAsyMy5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3IuTWFwUmVxdWlyZWRFbnRyeUID4EECElkKEm1hcF91bm9yZGVyZWRfbGlzdBgnIAMoCzI4LmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBVbm9yZGVyZWRMaXN0RW50cnlCA+BBBhJQChBtYXBfbm9ybWFsX2NoaWxkGCggAygLMjYuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yLk1hcE5vcm1hbENoaWxkRW50cnkSXQoUbWFwX2lkZW50aWZpZXJfY2hpbGQYKSADKAsyOi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3IuTWFwSWRlbnRpZmllckNoaWxkRW50cnlCA+BBCBJbChNtYXBfaW1tdXRhYmxlX2NoaWxkGCogAygLMjkuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yLk1hcEltbXV0YWJsZUNoaWxkRW50cnlCA+BBBRJcChRtYXBfaW5wdXRfb25seV9jaGlsZBgrIAMoCzI5LmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBJbnB1dE9ubHlDaGlsZEVudHJ5QgPgQQQSWQoSbWFwX29wdGlvbmFsX2NoaWxkGCwgAygLMjguYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yLk1hcE9wdGlvbmFsQ2hpbGRFbnRyeUID4EEBEl4KFW1hcF9vdXRwdXRfb25seV9jaGlsZBgtIAMoCzI6LmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBPdXRwdXRPbmx5Q2hpbGRFbnRyeUID4EEDElkKEm1hcF9yZXF1aXJlZF9jaGlsZBguIAMoCzI4LmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvci5NYXBSZXF1aXJlZENoaWxkRW50cnlCA+BBAhJkChhtYXBfdW5vcmRlcmVkX2xpc3RfY2hpbGQYLyADKAsyPS5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3IuTWFwVW5vcmRlcmVkTGlzdENoaWxkRW50cnlCA+BBBhIWCgxub3JtYWxfb25lb2YYMCABKAlIABJAChJub3JtYWxfb25lb2ZfY2hpbGQYMSABKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3JIABIfChBpZGVudGlmaWVyX29uZW9mGDIgASgJQgPgQQhIABIeCg9pbW11dGFibGVfb25lb2YYMyABKAlCA+BBBUgAEh8KEGlucHV0X29ubHlfb25lb2YYNCABKAlCA+BBBEgAEh0KDm9wdGlvbmFsX29uZW9mGDUgASgJQgPgQQFIABIgChFvdXRwdXRfb25seV9vbmVvZhg2IAEoCUID4EEDSAASHQoOcmVxdWlyZWRfb25lb2YYNyABKAlCA+BBAkgAEiMKFHVub3JkZXJlZF9saXN0X29uZW9mGDggASgJQgPgQQZIABowCg5NYXBOb3JtYWxFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjQKEk1hcElkZW50aWZpZXJFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjMKEU1hcEltbXV0YWJsZUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMwoRTWFwSW5wdXRPbmx5RW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJOgI4ARoyChBNYXBPcHRpb25hbEVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaNAoSTWFwT3V0cHV0T25seUVudHJ5EgsKA2tleRgBIAEoCRINCgV2YWx1ZRgCIAEoCToCOAEaMgoQTWFwUmVxdWlyZWRFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGjcKFU1hcFVub3JkZXJlZExpc3RFbnRyeRILCgNrZXkYASABKAkSDQoFdmFsdWUYAiABKAk6AjgBGlkKE01hcE5vcm1hbENoaWxkRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yOgI4ARpdChdNYXBJZGVudGlmaWVyQ2hpbGRFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3I6AjgBGlwKFk1hcEltbXV0YWJsZUNoaWxkRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yOgI4ARpcChZNYXBJbnB1dE9ubHlDaGlsZEVudHJ5EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgCIAEoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvcjoCOAEaWwoVTWFwT3B0aW9uYWxDaGlsZEVudHJ5EgsKA2tleRgBIAEoCRIxCgV2YWx1ZRgCIAEoCzIiLmJlYXJjbGF3LmFpcC52MS5UZXN0RmllbGRCZWhhdmlvcjoCOAEaXQoXTWFwT3V0cHV0T25seUNoaWxkRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yOgI4ARpbChVNYXBSZXF1aXJlZENoaWxkRW50cnkSCwoDa2V5GAEgASgJEjEKBXZhbHVlGAIgASgLMiIuYmVhcmNsYXcuYWlwLnYxLlRlc3RGaWVsZEJlaGF2aW9yOgI4ARpgChpNYXBVbm9yZGVyZWRMaXN0Q2hpbGRFbnRyeRILCgNrZXkYASABKAkSMQoFdmFsdWUYAiABKAsyIi5iZWFyY2xhdy5haXAudjEuVGVzdEZpZWxkQmVoYXZpb3I6AjgBQgcKBW9uZW9mIq0DChlUZXN0UmVxdWlyZWRGaWVsZEJlaGF2aW9yEg4KBm5vcm1hbBgBIAEoCRIVCghyZXF1aXJlZBgCIAEoCUID4EECEj8KBWNoaWxkGAMgASgLMjAuYmVhcmNsYXcuYWlwLnYxLlRlc3RSZXF1aXJlZEZpZWxkQmVoYXZpb3IuQ2hpbGQSSAoOcmVwZWF0ZWRfY2hpbGQYBCADKAsyMC5iZWFyY2xhdy5haXAudjEuVGVzdFJlcXVpcmVkRmllbGRCZWhhdmlvci5DaGlsZBJLCgltYXBfY2hpbGQYBSADKAsyOC5iZWFyY2xhdy5haXAudjEuVGVzdFJlcXVpcmVkRmllbGRCZWhhdmlvci5NYXBDaGlsZEVudHJ5Gi4KBUNoaWxkEg4KBm5vcm1hbBgBIAEoCRIVCghyZXF1aXJlZBgCIAEoCUID4EECGmEKDU1hcENoaWxkRW50cnkSCwoDa2V5GAEgASgJEj8KBXZhbHVlGAIgASgLMjAuYmVhcmNsYXcuYWlwLnYxLlRlc3RSZXF1aXJlZEZpZWxkQmVoYXZpb3IuQ2hpbGQ6AjgBIrQDChpUZXN0SW1tdXRhYmxlRmllbGRCZWhhdmlvchIOCgZub3JtYWwYASABKAkSFgoJaW1tdXRhYmxlGAIgASgJQgPgQQUSQAoFY2hpbGQYAyABKAsyMS5iZWFyY2xhdy5haXAudjEuVGVzdEltbXV0YWJsZUZpZWxkQmVoYXZpb3IuQ2hpbGQSSQoOcmVwZWF0ZWRfY2hpbGQYBCADKAsyMS5iZWFyY2xhdy5haXAudjEuVGVzdEltbXV0YWJsZUZpZWxkQmVoYXZpb3IuQ2hpbGQSTAoJbWFwX2NoaWxkGAUgAygLMjkuYmVhcmNsYXcuYWlwLnYxLlRlc3RJbW11dGFibGVGaWVsZEJlaGF2aW9yLk1hcENoaWxkRW50cnkaLwoFQ2hpbGQSDgoGbm9ybWFsGAEgASgJEhYKCWltbXV0YWJsZRgCIAEoCUID4EEFGmIKDU1hcENoaWxkRW50cnkSCwoDa2V5GAEgASgJEkAKBXZhbHVlGAIgASgLMjEuYmVhcmNsYXcuYWlwLnYxLlRlc3RJbW11dGFibGVGaWVsZEJlaGF2aW9yLkNoaWxkOgI4AWIGcHJvdG8z", [file_google_api_field_behavior]);

/**
 * @generated from message bearclaw.aip.v1.TestFieldBehavior
 */
export type TestFieldBehavior = Message<"bearclaw.aip.v1.TestFieldBehavior"> & {
  /**
   * @generated from field: string normal = 1;
   */
  normal: string;

  /**
   * @generated from field: string identifier = 2;
   */
  identifier: string;

  /**
   * @generated from field: string immutable = 3;
   */
  immutable: string;

  /**
   * @generated from field: string input_only = 4;
   */
  inputOnly: string;

  /**
   * @generated from field: string optional = 5;
   */
  optional: string;

  /**
   * @generated from field: string output_only = 6;
   */
  outputOnly: string;

  /**
   * @generated from field: string required = 7;
   */
  required: string;

  /**
   * @generated from field: string unordered_list = 8;
   */
  unorderedList: string;

  /**
   * @generated from field: repeated string repeated_identifier = 9;
   */
  repeatedIdentifier: string[];

  /**
   * @generated from field: repeated string repeated_immutable = 10;
   */
  repeatedImmutable: string[];

  /**
   * @generated from field: repeated string repeated_input_only = 11;
   */
  repeatedInputOnly: string[];

  /**
   * @generated from field: repeated string repeated_optional = 12;
   */
  repeatedOptional: string[];

  /**
   * @generated from field: repeated string repeated_output_only = 13;
   */
  repeatedOutputOnly: string[];

  /**
   * @generated from field: repeated string repeated_required = 14;
   */
  repeatedRequired: string[];

  /**
   * @generated from field: repeated string repeated_unordered_list = 15;
   */
  repeatedUnorderedList: string[];

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior normal_child = 16;
   */
  normalChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior identifier_child = 17;
   */
  identifierChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior immutable_child = 18;
   */
  immutableChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior input_only_child = 19;
   */
  inputOnlyChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior optional_child = 20;
   */
  optionalChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior output_only_child = 21;
   */
  outputOnlyChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior required_child = 22;
   */
  requiredChild?: TestFieldBehavior;

  /**
   * @generated from field: bearclaw.aip.v1.TestFieldBehavior unordered_list_child = 23;
   */
  unorderedListChild?: TestFieldBehavior;

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_normal_child = 24;
   */
  repeatedNormalChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_identifier_child = 25;
   */
  repeatedIdentifierChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_immutable_child = 26;
   */
  repeatedImmutableChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_input_only_child = 27;
   */
  repeatedInputOnlyChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_optional_child = 28;
   */
  repeatedOptionalChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_output_only_child = 29;
   */
  repeatedOutputOnlyChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_required_child = 30;
   */
  repeatedRequiredChild: TestFieldBehavior[];

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestFieldBehavior repeated_unordered_list_child = 31;
   */
  repeatedUnorderedListChild: TestFieldBehavior[];

  /**
   * @generated from field: map<string, string> map_normal = 32;
   */
  mapNormal: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_identifier = 33;
   */
  mapIdentifier: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_immutable = 34;
   */
  mapImmutable: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_input_only = 35;
   */
  mapInputOnly: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_optional = 36;
   */
  mapOptional: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_output_only = 37;
   */
  mapOutputOnly: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_required = 38;
   */
  mapRequired: { [key: string]: string };

  /**
   * @generated from field: map<string, string> map_unordered_list = 39;
   */
  mapUnorderedList: { [key: string]: string };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_normal_child = 40;
   */
  mapNormalChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_identifier_child = 41;
   */
  mapIdentifierChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_immutable_child = 42;
   */
  mapImmutableChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_input_only_child = 43;
   */
  mapInputOnlyChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_optional_child = 44;
   */
  mapOptionalChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_output_only_child = 45;
   */
  mapOutputOnlyChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_required_child = 46;
   */
  mapRequiredChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestFieldBehavior> map_unordered_list_child = 47;
   */
  mapUnorderedListChild: { [key: string]: TestFieldBehavior };

  /**
   * @generated from oneof bearclaw.aip.v1.TestFieldBehavior.oneof
   */
  oneof: {
    /**
     * @generated from field: string normal_oneof = 48;
     */
    value: string;
    case: "normalOneof";
  } | {
    /**
     * @generated from field: bearclaw.aip.v1.TestFieldBehavior normal_oneof_child = 49;
     */
    value: TestFieldBehavior;
    case: "normalOneofChild";
  } | {
    /**
     * @generated from field: string identifier_oneof = 50;
     */
    value: string;
    case: "identifierOneof";
  } | {
    /**
     * @generated from field: string immutable_oneof = 51;
     */
    value: string;
    case: "immutableOneof";
  } | {
    /**
     * @generated from field: string input_only_oneof = 52;
     */
    value: string;
    case: "inputOnlyOneof";
  } | {
    /**
     * @generated from field: string optional_oneof = 53;
     */
    value: string;
    case: "optionalOneof";
  } | {
    /**
     * @generated from field: string output_only_oneof = 54;
     */
    value: string;
    case: "outputOnlyOneof";
  } | {
    /**
     * @generated from field: string required_oneof = 55;
     */
    value: string;
    case: "requiredOneof";
  } | {
    /**
     * @generated from field: string unordered_list_oneof = 56;
     */
    value: string;
    case: "unorderedListOneof";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message bearclaw.aip.v1.TestFieldBehavior.
 * Use `create(TestFieldBehaviorSchema)` to create a new message.
 */
export const TestFieldBehaviorSchema: GenMessage<TestFieldBehavior> = /*@__PURE__*/
  messageDesc(file_bearclaw_aip_v1_fieldbehavior, 0);

/**
 * @generated from message bearclaw.aip.v1.TestRequiredFieldBehavior
 */
export type TestRequiredFieldBehavior = Message<"bearclaw.aip.v1.TestRequiredFieldBehavior"> & {
  /**
   * @generated from field: string normal = 1;
   */
  normal: string;

  /**
   * @generated from field: string required = 2;
   */
  required: string;

  /**
   * @generated from field: bearclaw.aip.v1.TestRequiredFieldBehavior.Child child = 3;
   */
  child?: TestRequiredFieldBehavior_Child;

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestRequiredFieldBehavior.Child repeated_child = 4;
   */
  repeatedChild: TestRequiredFieldBehavior_Child[];

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestRequiredFieldBehavior.Child> map_child = 5;
   */
  mapChild: { [key: string]: TestRequiredFieldBehavior_Child };
};

/**
 * Describes the message bearclaw.aip.v1.TestRequiredFieldBehavior.
 * Use `create(TestRequiredFieldBehaviorSchema)` to create a new message.
 */
export const TestRequiredFieldBehaviorSchema: GenMessage<TestRequiredFieldBehavior> = /*@__PURE__*/
  messageDesc(file_bearclaw_aip_v1_fieldbehavior, 1);

/**
 * @generated from message bearclaw.aip.v1.TestRequiredFieldBehavior.Child
 */
export type TestRequiredFieldBehavior_Child = Message<"bearclaw.aip.v1.TestRequiredFieldBehavior.Child"> & {
  /**
   * @generated from field: string normal = 1;
   */
  normal: string;

  /**
   * @generated from field: string required = 2;
   */
  required: string;
};

/**
 * Describes the message bearclaw.aip.v1.TestRequiredFieldBehavior.Child.
 * Use `create(TestRequiredFieldBehavior_ChildSchema)` to create a new message.
 */
export const TestRequiredFieldBehavior_ChildSchema: GenMessage<TestRequiredFieldBehavior_Child> = /*@__PURE__*/
  messageDesc(file_bearclaw_aip_v1_fieldbehavior, 1, 0);

/**
 * @generated from message bearclaw.aip.v1.TestImmutableFieldBehavior
 */
export type TestImmutableFieldBehavior = Message<"bearclaw.aip.v1.TestImmutableFieldBehavior"> & {
  /**
   * @generated from field: string normal = 1;
   */
  normal: string;

  /**
   * @generated from field: string immutable = 2;
   */
  immutable: string;

  /**
   * @generated from field: bearclaw.aip.v1.TestImmutableFieldBehavior.Child child = 3;
   */
  child?: TestImmutableFieldBehavior_Child;

  /**
   * @generated from field: repeated bearclaw.aip.v1.TestImmutableFieldBehavior.Child repeated_child = 4;
   */
  repeatedChild: TestImmutableFieldBehavior_Child[];

  /**
   * @generated from field: map<string, bearclaw.aip.v1.TestImmutableFieldBehavior.Child> map_child = 5;
   */
  mapChild: { [key: string]: TestImmutableFieldBehavior_Child };
};

/**
 * Describes the message bearclaw.aip.v1.TestImmutableFieldBehavior.
 * Use `create(TestImmutableFieldBehaviorSchema)` to create a new message.
 */
export const TestImmutableFieldBehaviorSchema: GenMessage<TestImmutableFieldBehavior> = /*@__PURE__*/
  messageDesc(file_bearclaw_aip_v1_fieldbehavior, 2);

/**
 * @generated from message bearclaw.aip.v1.TestImmutableFieldBehavior.Child
 */
export type TestImmutableFieldBehavior_Child = Message<"bearclaw.aip.v1.TestImmutableFieldBehavior.Child"> & {
  /**
   * @generated from field: string normal = 1;
   */
  normal: string;

  /**
   * @generated from field: string immutable = 2;
   */
  immutable: string;
};

/**
 * Describes the message bearclaw.aip.v1.TestImmutableFieldBehavior.Child.
 * Use `create(TestImmutableFieldBehavior_ChildSchema)` to create a new message.
 */
export const TestImmutableFieldBehavior_ChildSchema: GenMessage<TestImmutableFieldBehavior_Child> = /*@__PURE__*/
  messageDesc(file_bearclaw_aip_v1_fieldbehavior, 2, 0);

