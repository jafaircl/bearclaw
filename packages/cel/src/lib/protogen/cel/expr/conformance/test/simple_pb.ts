// Copyright 2024-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Simple end-to-end conformance tests.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.js,ts_nocheck=false"
// @generated from file cel/expr/conformance/test/simple.proto (package cel.expr.conformance.test, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Decl } from "../../checked_pb.js";
import { file_cel_expr_checked } from "../../checked_pb.js";
import type { ErrorSet, ExprValue, UnknownSet } from "../../eval_pb.js";
import { file_cel_expr_eval } from "../../eval_pb.js";
import type { Value } from "../../value_pb.js";
import { file_cel_expr_value } from "../../value_pb.js";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file cel/expr/conformance/test/simple.proto.
 */
export const file_cel_expr_conformance_test_simple: GenFile = /*@__PURE__*/
  fileDesc("CiZjZWwvZXhwci9jb25mb3JtYW5jZS90ZXN0L3NpbXBsZS5wcm90bxIZY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdCJyCg5TaW1wbGVUZXN0RmlsZRIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEj0KB3NlY3Rpb24YAyADKAsyLC5jZWwuZXhwci5jb25mb3JtYW5jZS50ZXN0LlNpbXBsZVRlc3RTZWN0aW9uImsKEVNpbXBsZVRlc3RTZWN0aW9uEgwKBG5hbWUYASABKAkSEwoLZGVzY3JpcHRpb24YAiABKAkSMwoEdGVzdBgDIAMoCzIlLmNlbC5leHByLmNvbmZvcm1hbmNlLnRlc3QuU2ltcGxlVGVzdCLSBAoKU2ltcGxlVGVzdBIMCgRuYW1lGAEgASgJEhMKC2Rlc2NyaXB0aW9uGAIgASgJEgwKBGV4cHIYAyABKAkSFgoOZGlzYWJsZV9tYWNyb3MYBCABKAgSFQoNZGlzYWJsZV9jaGVjaxgFIAEoCBIgCgh0eXBlX2VudhgGIAMoCzIOLmNlbC5leHByLkRlY2wSEQoJY29udGFpbmVyGA0gASgJEg4KBmxvY2FsZRgOIAEoCRJFCghiaW5kaW5ncxgHIAMoCzIzLmNlbC5leHByLmNvbmZvcm1hbmNlLnRlc3QuU2ltcGxlVGVzdC5CaW5kaW5nc0VudHJ5EiAKBXZhbHVlGAggASgLMg8uY2VsLmV4cHIuVmFsdWVIABIoCgpldmFsX2Vycm9yGAkgASgLMhIuY2VsLmV4cHIuRXJyb3JTZXRIABJFCg9hbnlfZXZhbF9lcnJvcnMYCiABKAsyKi5jZWwuZXhwci5jb25mb3JtYW5jZS50ZXN0LkVycm9yU2V0TWF0Y2hlckgAEicKB3Vua25vd24YCyABKAsyFC5jZWwuZXhwci5Vbmtub3duU2V0SAASRAoMYW55X3Vua25vd25zGAwgASgLMiwuY2VsLmV4cHIuY29uZm9ybWFuY2UudGVzdC5Vbmtub3duU2V0TWF0Y2hlckgAGkQKDUJpbmRpbmdzRW50cnkSCwoDa2V5GAEgASgJEiIKBXZhbHVlGAIgASgLMhMuY2VsLmV4cHIuRXhwclZhbHVlOgI4AUIQCg5yZXN1bHRfbWF0Y2hlciI1Cg9FcnJvclNldE1hdGNoZXISIgoGZXJyb3JzGAEgAygLMhIuY2VsLmV4cHIuRXJyb3JTZXQiOwoRVW5rbm93blNldE1hdGNoZXISJgoIdW5rbm93bnMYASADKAsyFC5jZWwuZXhwci5Vbmtub3duU2V0QksKGGRldi5jZWwuZXhwci5jb25mb3JtYW5jZUILU2ltcGxlUHJvdG9QAVodY2VsLmRldi9leHByL2NvbmZvcm1hbmNlL3Rlc3T4AQFiBnByb3RvMw", [file_cel_expr_checked, file_cel_expr_eval, file_cel_expr_value]);

/**
 * The format of a simple test file, expected to be stored in text format.
 * A file is the unit of granularity for selecting conformance tests,
 * so tests of optional features should be segregated into separate files.
 *
 * @generated from message cel.expr.conformance.test.SimpleTestFile
 */
export type SimpleTestFile = Message<"cel.expr.conformance.test.SimpleTestFile"> & {
  /**
   * Required.  The name of the file.  Should match the filename.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A description of the file.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The contained sections.
   *
   * @generated from field: repeated cel.expr.conformance.test.SimpleTestSection section = 3;
   */
  section: SimpleTestSection[];
};

/**
 * Describes the message cel.expr.conformance.test.SimpleTestFile.
 * Use `create(SimpleTestFileSchema)` to create a new message.
 */
export const SimpleTestFileSchema: GenMessage<SimpleTestFile> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_simple, 0);

/**
 * A collection of related SimpleTests.
 *
 * The section is the unit of organization within a test file, and should
 * guide where new tests are added.
 *
 * @generated from message cel.expr.conformance.test.SimpleTestSection
 */
export type SimpleTestSection = Message<"cel.expr.conformance.test.SimpleTestSection"> & {
  /**
   * Required.  The name of the section.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A description of the section.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * The contained tests.
   *
   * @generated from field: repeated cel.expr.conformance.test.SimpleTest test = 3;
   */
  test: SimpleTest[];
};

/**
 * Describes the message cel.expr.conformance.test.SimpleTestSection.
 * Use `create(SimpleTestSectionSchema)` to create a new message.
 */
export const SimpleTestSectionSchema: GenMessage<SimpleTestSection> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_simple, 1);

/**
 * A test which should run the given CEL program through parsing,
 * optionally through checking, then evaluation, with the results
 * of the pipeline validated by the given result matcher.
 *
 * @generated from message cel.expr.conformance.test.SimpleTest
 */
export type SimpleTest = Message<"cel.expr.conformance.test.SimpleTest"> & {
  /**
   * Required.  The name of the test, which should be unique in the test file.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * A description of the test.
   *
   * @generated from field: string description = 2;
   */
  description: string;

  /**
   * Required.  The text of the CEL expression.
   *
   * @generated from field: string expr = 3;
   */
  expr: string;

  /**
   * Disables all macro expansion in parsing.
   *
   * @generated from field: bool disable_macros = 4;
   */
  disableMacros: boolean;

  /**
   * Disables the check phase.
   *
   * @generated from field: bool disable_check = 5;
   */
  disableCheck: boolean;

  /**
   * The type environment to use for the check phase.
   *
   * @generated from field: repeated cel.expr.Decl type_env = 6;
   */
  typeEnv: Decl[];

  /**
   * The container for name resolution.
   *
   * @generated from field: string container = 13;
   */
  container: string;

  /**
   * The locale to use for the evaluation phase.
   *
   * @generated from field: string locale = 14;
   */
  locale: string;

  /**
   * Variable bindings to use for the eval phase.
   *
   * @generated from field: map<string, cel.expr.ExprValue> bindings = 7;
   */
  bindings: { [key: string]: ExprValue };

  /**
   * An unspecified result defaults to a matcher for the true boolean value.
   *
   * @generated from oneof cel.expr.conformance.test.SimpleTest.result_matcher
   */
  resultMatcher: {
    /**
     * A normal value, which must match the evaluation result exactly
     * via value equality semantics.  This coincides with proto equality,
     * except for:
     * *   maps are order-agnostic.
     * *   a floating point NaN should match any NaN.
     *
     * @generated from field: cel.expr.Value value = 8;
     */
    value: Value;
    case: "value";
  } | {
    /**
     * Matches error evaluation results.
     *
     * @generated from field: cel.expr.ErrorSet eval_error = 9;
     */
    value: ErrorSet;
    case: "evalError";
  } | {
    /**
     * Matches one of several error results.
     * (Using explicit message since oneof can't handle repeated.)
     *
     * @generated from field: cel.expr.conformance.test.ErrorSetMatcher any_eval_errors = 10;
     */
    value: ErrorSetMatcher;
    case: "anyEvalErrors";
  } | {
    /**
     * Matches unknown evaluation results.
     *
     * @generated from field: cel.expr.UnknownSet unknown = 11;
     */
    value: UnknownSet;
    case: "unknown";
  } | {
    /**
     * Matches one of several unknown results.
     * (Using explicit message since oneof can't handle repeated.)
     *
     * @generated from field: cel.expr.conformance.test.UnknownSetMatcher any_unknowns = 12;
     */
    value: UnknownSetMatcher;
    case: "anyUnknowns";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.expr.conformance.test.SimpleTest.
 * Use `create(SimpleTestSchema)` to create a new message.
 */
export const SimpleTestSchema: GenMessage<SimpleTest> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_simple, 2);

/**
 * Matches error results from Eval.
 *
 * @generated from message cel.expr.conformance.test.ErrorSetMatcher
 */
export type ErrorSetMatcher = Message<"cel.expr.conformance.test.ErrorSetMatcher"> & {
  /**
   * Success if we match any of these sets.
   *
   * @generated from field: repeated cel.expr.ErrorSet errors = 1;
   */
  errors: ErrorSet[];
};

/**
 * Describes the message cel.expr.conformance.test.ErrorSetMatcher.
 * Use `create(ErrorSetMatcherSchema)` to create a new message.
 */
export const ErrorSetMatcherSchema: GenMessage<ErrorSetMatcher> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_simple, 3);

/**
 * Matches unknown results from Eval.
 *
 * @generated from message cel.expr.conformance.test.UnknownSetMatcher
 */
export type UnknownSetMatcher = Message<"cel.expr.conformance.test.UnknownSetMatcher"> & {
  /**
   * Success if we match any of these sets.
   *
   * @generated from field: repeated cel.expr.UnknownSet unknowns = 1;
   */
  unknowns: UnknownSet[];
};

/**
 * Describes the message cel.expr.conformance.test.UnknownSetMatcher.
 * Use `create(UnknownSetMatcherSchema)` to create a new message.
 */
export const UnknownSetMatcherSchema: GenMessage<UnknownSetMatcher> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_test_simple, 4);

