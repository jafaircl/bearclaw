// Copyright 2024-2025 Buf Technologies, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.js,ts_nocheck=false"
// @generated from file cel/expr/conformance/proto3/test_all_types.proto (package cel.expr.conformance.proto3, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Any, BoolValue, BytesValue, DoubleValue, Duration, Empty, FieldMask, FloatValue, Int32Value, Int64Value, ListValue, NullValue, StringValue, Timestamp, UInt32Value, UInt64Value, Value } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { JsonObject, Message } from "@bufbuild/protobuf";

/**
 * Describes the file cel/expr/conformance/proto3/test_all_types.proto.
 */
export const file_cel_expr_conformance_proto3_test_all_types: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_any, file_google_protobuf_duration, file_google_protobuf_empty, file_google_protobuf_field_mask, file_google_protobuf_struct, file_google_protobuf_timestamp, file_google_protobuf_wrappers]);

/**
 * This proto includes every type of field in both singular and repeated
 * forms.
 *
 * @generated from message cel.expr.conformance.proto3.TestAllTypes
 */
export type TestAllTypes = Message<"cel.expr.conformance.proto3.TestAllTypes"> & {
  /**
   * Singular
   *
   * @generated from field: int32 single_int32 = 1;
   */
  singleInt32: number;

  /**
   * @generated from field: int64 single_int64 = 2;
   */
  singleInt64: bigint;

  /**
   * @generated from field: uint32 single_uint32 = 3;
   */
  singleUint32: number;

  /**
   * @generated from field: uint64 single_uint64 = 4;
   */
  singleUint64: bigint;

  /**
   * @generated from field: sint32 single_sint32 = 5;
   */
  singleSint32: number;

  /**
   * @generated from field: sint64 single_sint64 = 6;
   */
  singleSint64: bigint;

  /**
   * @generated from field: fixed32 single_fixed32 = 7;
   */
  singleFixed32: number;

  /**
   * @generated from field: fixed64 single_fixed64 = 8;
   */
  singleFixed64: bigint;

  /**
   * @generated from field: sfixed32 single_sfixed32 = 9;
   */
  singleSfixed32: number;

  /**
   * @generated from field: sfixed64 single_sfixed64 = 10;
   */
  singleSfixed64: bigint;

  /**
   * @generated from field: float single_float = 11;
   */
  singleFloat: number;

  /**
   * @generated from field: double single_double = 12;
   */
  singleDouble: number;

  /**
   * @generated from field: bool single_bool = 13;
   */
  singleBool: boolean;

  /**
   * @generated from field: string single_string = 14;
   */
  singleString: string;

  /**
   * @generated from field: bytes single_bytes = 15;
   */
  singleBytes: Uint8Array;

  /**
   * @generated from field: optional bool optional_bool = 16;
   */
  optionalBool?: boolean;

  /**
   * @generated from field: optional bool optional_string = 17;
   */
  optionalString?: boolean;

  /**
   * Wellknown.
   *
   * @generated from field: google.protobuf.Any single_any = 100;
   */
  singleAny?: Any;

  /**
   * @generated from field: google.protobuf.Duration single_duration = 101;
   */
  singleDuration?: Duration;

  /**
   * @generated from field: google.protobuf.Timestamp single_timestamp = 102;
   */
  singleTimestamp?: Timestamp;

  /**
   * @generated from field: google.protobuf.Struct single_struct = 103;
   */
  singleStruct?: JsonObject;

  /**
   * @generated from field: google.protobuf.Value single_value = 104;
   */
  singleValue?: Value;

  /**
   * @generated from field: google.protobuf.Int64Value single_int64_wrapper = 105;
   */
  singleInt64Wrapper?: bigint;

  /**
   * @generated from field: google.protobuf.Int32Value single_int32_wrapper = 106;
   */
  singleInt32Wrapper?: number;

  /**
   * @generated from field: google.protobuf.DoubleValue single_double_wrapper = 107;
   */
  singleDoubleWrapper?: number;

  /**
   * @generated from field: google.protobuf.FloatValue single_float_wrapper = 108;
   */
  singleFloatWrapper?: number;

  /**
   * @generated from field: google.protobuf.UInt64Value single_uint64_wrapper = 109;
   */
  singleUint64Wrapper?: bigint;

  /**
   * @generated from field: google.protobuf.UInt32Value single_uint32_wrapper = 110;
   */
  singleUint32Wrapper?: number;

  /**
   * @generated from field: google.protobuf.StringValue single_string_wrapper = 111;
   */
  singleStringWrapper?: string;

  /**
   * @generated from field: google.protobuf.BoolValue single_bool_wrapper = 112;
   */
  singleBoolWrapper?: boolean;

  /**
   * @generated from field: google.protobuf.BytesValue single_bytes_wrapper = 113;
   */
  singleBytesWrapper?: Uint8Array;

  /**
   * @generated from field: google.protobuf.ListValue list_value = 114;
   */
  listValue?: ListValue;

  /**
   * @generated from field: google.protobuf.NullValue null_value = 115;
   */
  nullValue: NullValue;

  /**
   * @generated from field: optional google.protobuf.NullValue optional_null_value = 116;
   */
  optionalNullValue?: NullValue;

  /**
   * @generated from field: google.protobuf.FieldMask field_mask = 117;
   */
  fieldMask?: FieldMask;

  /**
   * @generated from field: google.protobuf.Empty empty = 118;
   */
  empty?: Empty;

  /**
   * Nested messages
   *
   * @generated from oneof cel.expr.conformance.proto3.TestAllTypes.nested_type
   */
  nestedType: {
    /**
     * @generated from field: cel.expr.conformance.proto3.TestAllTypes.NestedMessage single_nested_message = 21;
     */
    value: TestAllTypes_NestedMessage;
    case: "singleNestedMessage";
  } | {
    /**
     * @generated from field: cel.expr.conformance.proto3.TestAllTypes.NestedEnum single_nested_enum = 22;
     */
    value: TestAllTypes_NestedEnum;
    case: "singleNestedEnum";
  } | { case: undefined; value?: undefined };

  /**
   * @generated from field: cel.expr.conformance.proto3.TestAllTypes.NestedMessage standalone_message = 23;
   */
  standaloneMessage?: TestAllTypes_NestedMessage;

  /**
   * @generated from field: cel.expr.conformance.proto3.TestAllTypes.NestedEnum standalone_enum = 24;
   */
  standaloneEnum: TestAllTypes_NestedEnum;

  /**
   * Repeated
   *
   * @generated from field: repeated int32 repeated_int32 = 31;
   */
  repeatedInt32: number[];

  /**
   * @generated from field: repeated int64 repeated_int64 = 32;
   */
  repeatedInt64: bigint[];

  /**
   * @generated from field: repeated uint32 repeated_uint32 = 33;
   */
  repeatedUint32: number[];

  /**
   * @generated from field: repeated uint64 repeated_uint64 = 34;
   */
  repeatedUint64: bigint[];

  /**
   * @generated from field: repeated sint32 repeated_sint32 = 35;
   */
  repeatedSint32: number[];

  /**
   * @generated from field: repeated sint64 repeated_sint64 = 36;
   */
  repeatedSint64: bigint[];

  /**
   * @generated from field: repeated fixed32 repeated_fixed32 = 37;
   */
  repeatedFixed32: number[];

  /**
   * @generated from field: repeated fixed64 repeated_fixed64 = 38;
   */
  repeatedFixed64: bigint[];

  /**
   * @generated from field: repeated sfixed32 repeated_sfixed32 = 39;
   */
  repeatedSfixed32: number[];

  /**
   * @generated from field: repeated sfixed64 repeated_sfixed64 = 40;
   */
  repeatedSfixed64: bigint[];

  /**
   * @generated from field: repeated float repeated_float = 41;
   */
  repeatedFloat: number[];

  /**
   * @generated from field: repeated double repeated_double = 42;
   */
  repeatedDouble: number[];

  /**
   * @generated from field: repeated bool repeated_bool = 43;
   */
  repeatedBool: boolean[];

  /**
   * @generated from field: repeated string repeated_string = 44;
   */
  repeatedString: string[];

  /**
   * @generated from field: repeated bytes repeated_bytes = 45;
   */
  repeatedBytes: Uint8Array[];

  /**
   * Repeated and nested
   *
   * @generated from field: repeated cel.expr.conformance.proto3.TestAllTypes.NestedMessage repeated_nested_message = 51;
   */
  repeatedNestedMessage: TestAllTypes_NestedMessage[];

  /**
   * @generated from field: repeated cel.expr.conformance.proto3.TestAllTypes.NestedEnum repeated_nested_enum = 52;
   */
  repeatedNestedEnum: TestAllTypes_NestedEnum[];

  /**
   * @generated from field: repeated string repeated_string_piece = 53;
   */
  repeatedStringPiece: string[];

  /**
   * @generated from field: repeated string repeated_cord = 54;
   */
  repeatedCord: string[];

  /**
   * @generated from field: repeated cel.expr.conformance.proto3.TestAllTypes.NestedMessage repeated_lazy_message = 55;
   */
  repeatedLazyMessage: TestAllTypes_NestedMessage[];

  /**
   * Repeated wellknown.
   *
   * @generated from field: repeated google.protobuf.Any repeated_any = 120;
   */
  repeatedAny: Any[];

  /**
   * @generated from field: repeated google.protobuf.Duration repeated_duration = 121;
   */
  repeatedDuration: Duration[];

  /**
   * @generated from field: repeated google.protobuf.Timestamp repeated_timestamp = 122;
   */
  repeatedTimestamp: Timestamp[];

  /**
   * @generated from field: repeated google.protobuf.Struct repeated_struct = 123;
   */
  repeatedStruct: JsonObject[];

  /**
   * @generated from field: repeated google.protobuf.Value repeated_value = 124;
   */
  repeatedValue: Value[];

  /**
   * @generated from field: repeated google.protobuf.Int64Value repeated_int64_wrapper = 125;
   */
  repeatedInt64Wrapper: Int64Value[];

  /**
   * @generated from field: repeated google.protobuf.Int32Value repeated_int32_wrapper = 126;
   */
  repeatedInt32Wrapper: Int32Value[];

  /**
   * @generated from field: repeated google.protobuf.DoubleValue repeated_double_wrapper = 127;
   */
  repeatedDoubleWrapper: DoubleValue[];

  /**
   * @generated from field: repeated google.protobuf.FloatValue repeated_float_wrapper = 128;
   */
  repeatedFloatWrapper: FloatValue[];

  /**
   * @generated from field: repeated google.protobuf.UInt64Value repeated_uint64_wrapper = 129;
   */
  repeatedUint64Wrapper: UInt64Value[];

  /**
   * @generated from field: repeated google.protobuf.UInt32Value repeated_uint32_wrapper = 130;
   */
  repeatedUint32Wrapper: UInt32Value[];

  /**
   * @generated from field: repeated google.protobuf.StringValue repeated_string_wrapper = 131;
   */
  repeatedStringWrapper: StringValue[];

  /**
   * @generated from field: repeated google.protobuf.BoolValue repeated_bool_wrapper = 132;
   */
  repeatedBoolWrapper: BoolValue[];

  /**
   * @generated from field: repeated google.protobuf.BytesValue repeated_bytes_wrapper = 133;
   */
  repeatedBytesWrapper: BytesValue[];

  /**
   * @generated from field: repeated google.protobuf.ListValue repeated_list_value = 134;
   */
  repeatedListValue: ListValue[];

  /**
   * @generated from field: repeated google.protobuf.NullValue repeated_null_value = 135;
   */
  repeatedNullValue: NullValue[];

  /**
   * Map
   *
   * @generated from field: map<int64, cel.expr.conformance.proto3.NestedTestAllTypes> map_int64_nested_type = 62;
   */
  mapInt64NestedType: { [key: string]: NestedTestAllTypes };

  /**
   * @generated from field: map<bool, bool> map_bool_bool = 63;
   */
  mapBoolBool: { [key: string]: boolean };

  /**
   * @generated from field: map<bool, string> map_bool_string = 64;
   */
  mapBoolString: { [key: string]: string };

  /**
   * @generated from field: map<bool, bytes> map_bool_bytes = 65;
   */
  mapBoolBytes: { [key: string]: Uint8Array };

  /**
   * @generated from field: map<bool, int32> map_bool_int32 = 66;
   */
  mapBoolInt32: { [key: string]: number };

  /**
   * @generated from field: map<bool, int64> map_bool_int64 = 67;
   */
  mapBoolInt64: { [key: string]: bigint };

  /**
   * @generated from field: map<bool, uint32> map_bool_uint32 = 68;
   */
  mapBoolUint32: { [key: string]: number };

  /**
   * @generated from field: map<bool, uint64> map_bool_uint64 = 69;
   */
  mapBoolUint64: { [key: string]: bigint };

  /**
   * @generated from field: map<bool, float> map_bool_float = 70;
   */
  mapBoolFloat: { [key: string]: number };

  /**
   * @generated from field: map<bool, double> map_bool_double = 71;
   */
  mapBoolDouble: { [key: string]: number };

  /**
   * @generated from field: map<bool, cel.expr.conformance.proto3.TestAllTypes.NestedEnum> map_bool_enum = 72;
   */
  mapBoolEnum: { [key: string]: TestAllTypes_NestedEnum };

  /**
   * @generated from field: map<bool, cel.expr.conformance.proto3.TestAllTypes.NestedMessage> map_bool_message = 73;
   */
  mapBoolMessage: { [key: string]: TestAllTypes_NestedMessage };

  /**
   * @generated from field: map<bool, google.protobuf.Duration> map_bool_duration = 228;
   */
  mapBoolDuration: { [key: string]: Duration };

  /**
   * @generated from field: map<bool, google.protobuf.Timestamp> map_bool_timestamp = 229;
   */
  mapBoolTimestamp: { [key: string]: Timestamp };

  /**
   * @generated from field: map<bool, google.protobuf.NullValue> map_bool_null_value = 230;
   */
  mapBoolNullValue: { [key: string]: NullValue };

  /**
   * @generated from field: map<bool, google.protobuf.Any> map_bool_any = 246;
   */
  mapBoolAny: { [key: string]: Any };

  /**
   * @generated from field: map<bool, google.protobuf.Struct> map_bool_struct = 247;
   */
  mapBoolStruct: { [key: string]: JsonObject };

  /**
   * @generated from field: map<bool, google.protobuf.Value> map_bool_value = 248;
   */
  mapBoolValue: { [key: string]: Value };

  /**
   * @generated from field: map<bool, google.protobuf.ListValue> map_bool_list_value = 249;
   */
  mapBoolListValue: { [key: string]: ListValue };

  /**
   * @generated from field: map<bool, google.protobuf.Int64Value> map_bool_int64_wrapper = 250;
   */
  mapBoolInt64Wrapper: { [key: string]: Int64Value };

  /**
   * @generated from field: map<bool, google.protobuf.Int32Value> map_bool_int32_wrapper = 251;
   */
  mapBoolInt32Wrapper: { [key: string]: Int32Value };

  /**
   * @generated from field: map<bool, google.protobuf.DoubleValue> map_bool_double_wrapper = 252;
   */
  mapBoolDoubleWrapper: { [key: string]: DoubleValue };

  /**
   * @generated from field: map<bool, google.protobuf.FloatValue> map_bool_float_wrapper = 253;
   */
  mapBoolFloatWrapper: { [key: string]: FloatValue };

  /**
   * @generated from field: map<bool, google.protobuf.UInt64Value> map_bool_uint64_wrapper = 254;
   */
  mapBoolUint64Wrapper: { [key: string]: UInt64Value };

  /**
   * @generated from field: map<bool, google.protobuf.UInt32Value> map_bool_uint32_wrapper = 255;
   */
  mapBoolUint32Wrapper: { [key: string]: UInt32Value };

  /**
   * @generated from field: map<bool, google.protobuf.StringValue> map_bool_string_wrapper = 256;
   */
  mapBoolStringWrapper: { [key: string]: StringValue };

  /**
   * @generated from field: map<bool, google.protobuf.BoolValue> map_bool_bool_wrapper = 257;
   */
  mapBoolBoolWrapper: { [key: string]: BoolValue };

  /**
   * @generated from field: map<bool, google.protobuf.BytesValue> map_bool_bytes_wrapper = 258;
   */
  mapBoolBytesWrapper: { [key: string]: BytesValue };

  /**
   * @generated from field: map<int32, bool> map_int32_bool = 74;
   */
  mapInt32Bool: { [key: number]: boolean };

  /**
   * @generated from field: map<int32, string> map_int32_string = 75;
   */
  mapInt32String: { [key: number]: string };

  /**
   * @generated from field: map<int32, bytes> map_int32_bytes = 76;
   */
  mapInt32Bytes: { [key: number]: Uint8Array };

  /**
   * @generated from field: map<int32, int32> map_int32_int32 = 77;
   */
  mapInt32Int32: { [key: number]: number };

  /**
   * @generated from field: map<int32, int64> map_int32_int64 = 78;
   */
  mapInt32Int64: { [key: number]: bigint };

  /**
   * @generated from field: map<int32, uint32> map_int32_uint32 = 79;
   */
  mapInt32Uint32: { [key: number]: number };

  /**
   * @generated from field: map<int32, uint64> map_int32_uint64 = 80;
   */
  mapInt32Uint64: { [key: number]: bigint };

  /**
   * @generated from field: map<int32, float> map_int32_float = 81;
   */
  mapInt32Float: { [key: number]: number };

  /**
   * @generated from field: map<int32, double> map_int32_double = 82;
   */
  mapInt32Double: { [key: number]: number };

  /**
   * @generated from field: map<int32, cel.expr.conformance.proto3.TestAllTypes.NestedEnum> map_int32_enum = 83;
   */
  mapInt32Enum: { [key: number]: TestAllTypes_NestedEnum };

  /**
   * @generated from field: map<int32, cel.expr.conformance.proto3.TestAllTypes.NestedMessage> map_int32_message = 84;
   */
  mapInt32Message: { [key: number]: TestAllTypes_NestedMessage };

  /**
   * @generated from field: map<int32, google.protobuf.Duration> map_int32_duration = 231;
   */
  mapInt32Duration: { [key: number]: Duration };

  /**
   * @generated from field: map<int32, google.protobuf.Timestamp> map_int32_timestamp = 232;
   */
  mapInt32Timestamp: { [key: number]: Timestamp };

  /**
   * @generated from field: map<int32, google.protobuf.NullValue> map_int32_null_value = 233;
   */
  mapInt32NullValue: { [key: number]: NullValue };

  /**
   * @generated from field: map<int32, google.protobuf.Any> map_int32_any = 259;
   */
  mapInt32Any: { [key: number]: Any };

  /**
   * @generated from field: map<int32, google.protobuf.Struct> map_int32_struct = 260;
   */
  mapInt32Struct: { [key: number]: JsonObject };

  /**
   * @generated from field: map<int32, google.protobuf.Value> map_int32_value = 261;
   */
  mapInt32Value: { [key: number]: Value };

  /**
   * @generated from field: map<int32, google.protobuf.ListValue> map_int32_list_value = 262;
   */
  mapInt32ListValue: { [key: number]: ListValue };

  /**
   * @generated from field: map<int32, google.protobuf.Int64Value> map_int32_int64_wrapper = 263;
   */
  mapInt32Int64Wrapper: { [key: number]: Int64Value };

  /**
   * @generated from field: map<int32, google.protobuf.Int32Value> map_int32_int32_wrapper = 264;
   */
  mapInt32Int32Wrapper: { [key: number]: Int32Value };

  /**
   * @generated from field: map<int32, google.protobuf.DoubleValue> map_int32_double_wrapper = 265;
   */
  mapInt32DoubleWrapper: { [key: number]: DoubleValue };

  /**
   * @generated from field: map<int32, google.protobuf.FloatValue> map_int32_float_wrapper = 266;
   */
  mapInt32FloatWrapper: { [key: number]: FloatValue };

  /**
   * @generated from field: map<int32, google.protobuf.UInt64Value> map_int32_uint64_wrapper = 267;
   */
  mapInt32Uint64Wrapper: { [key: number]: UInt64Value };

  /**
   * @generated from field: map<int32, google.protobuf.UInt32Value> map_int32_uint32_wrapper = 268;
   */
  mapInt32Uint32Wrapper: { [key: number]: UInt32Value };

  /**
   * @generated from field: map<int32, google.protobuf.StringValue> map_int32_string_wrapper = 269;
   */
  mapInt32StringWrapper: { [key: number]: StringValue };

  /**
   * @generated from field: map<int32, google.protobuf.BoolValue> map_int32_bool_wrapper = 270;
   */
  mapInt32BoolWrapper: { [key: number]: BoolValue };

  /**
   * @generated from field: map<int32, google.protobuf.BytesValue> map_int32_bytes_wrapper = 271;
   */
  mapInt32BytesWrapper: { [key: number]: BytesValue };

  /**
   * @generated from field: map<int64, bool> map_int64_bool = 85;
   */
  mapInt64Bool: { [key: string]: boolean };

  /**
   * @generated from field: map<int64, string> map_int64_string = 86;
   */
  mapInt64String: { [key: string]: string };

  /**
   * @generated from field: map<int64, bytes> map_int64_bytes = 87;
   */
  mapInt64Bytes: { [key: string]: Uint8Array };

  /**
   * @generated from field: map<int64, int32> map_int64_int32 = 88;
   */
  mapInt64Int32: { [key: string]: number };

  /**
   * @generated from field: map<int64, int64> map_int64_int64 = 89;
   */
  mapInt64Int64: { [key: string]: bigint };

  /**
   * @generated from field: map<int64, uint32> map_int64_uint32 = 90;
   */
  mapInt64Uint32: { [key: string]: number };

  /**
   * @generated from field: map<int64, uint64> map_int64_uint64 = 91;
   */
  mapInt64Uint64: { [key: string]: bigint };

  /**
   * @generated from field: map<int64, float> map_int64_float = 92;
   */
  mapInt64Float: { [key: string]: number };

  /**
   * @generated from field: map<int64, double> map_int64_double = 93;
   */
  mapInt64Double: { [key: string]: number };

  /**
   * @generated from field: map<int64, cel.expr.conformance.proto3.TestAllTypes.NestedEnum> map_int64_enum = 94;
   */
  mapInt64Enum: { [key: string]: TestAllTypes_NestedEnum };

  /**
   * @generated from field: map<int64, cel.expr.conformance.proto3.TestAllTypes.NestedMessage> map_int64_message = 95;
   */
  mapInt64Message: { [key: string]: TestAllTypes_NestedMessage };

  /**
   * @generated from field: map<int64, google.protobuf.Duration> map_int64_duration = 234;
   */
  mapInt64Duration: { [key: string]: Duration };

  /**
   * @generated from field: map<int64, google.protobuf.Timestamp> map_int64_timestamp = 235;
   */
  mapInt64Timestamp: { [key: string]: Timestamp };

  /**
   * @generated from field: map<int64, google.protobuf.NullValue> map_int64_null_value = 236;
   */
  mapInt64NullValue: { [key: string]: NullValue };

  /**
   * @generated from field: map<int64, google.protobuf.Any> map_int64_any = 272;
   */
  mapInt64Any: { [key: string]: Any };

  /**
   * @generated from field: map<int64, google.protobuf.Struct> map_int64_struct = 273;
   */
  mapInt64Struct: { [key: string]: JsonObject };

  /**
   * @generated from field: map<int64, google.protobuf.Value> map_int64_value = 274;
   */
  mapInt64Value: { [key: string]: Value };

  /**
   * @generated from field: map<int64, google.protobuf.ListValue> map_int64_list_value = 275;
   */
  mapInt64ListValue: { [key: string]: ListValue };

  /**
   * @generated from field: map<int64, google.protobuf.Int64Value> map_int64_int64_wrapper = 276;
   */
  mapInt64Int64Wrapper: { [key: string]: Int64Value };

  /**
   * @generated from field: map<int64, google.protobuf.Int32Value> map_int64_int32_wrapper = 277;
   */
  mapInt64Int32Wrapper: { [key: string]: Int32Value };

  /**
   * @generated from field: map<int64, google.protobuf.DoubleValue> map_int64_double_wrapper = 278;
   */
  mapInt64DoubleWrapper: { [key: string]: DoubleValue };

  /**
   * @generated from field: map<int64, google.protobuf.FloatValue> map_int64_float_wrapper = 279;
   */
  mapInt64FloatWrapper: { [key: string]: FloatValue };

  /**
   * @generated from field: map<int64, google.protobuf.UInt64Value> map_int64_uint64_wrapper = 280;
   */
  mapInt64Uint64Wrapper: { [key: string]: UInt64Value };

  /**
   * @generated from field: map<int64, google.protobuf.UInt32Value> map_int64_uint32_wrapper = 281;
   */
  mapInt64Uint32Wrapper: { [key: string]: UInt32Value };

  /**
   * @generated from field: map<int64, google.protobuf.StringValue> map_int64_string_wrapper = 282;
   */
  mapInt64StringWrapper: { [key: string]: StringValue };

  /**
   * @generated from field: map<int64, google.protobuf.BoolValue> map_int64_bool_wrapper = 283;
   */
  mapInt64BoolWrapper: { [key: string]: BoolValue };

  /**
   * @generated from field: map<int64, google.protobuf.BytesValue> map_int64_bytes_wrapper = 284;
   */
  mapInt64BytesWrapper: { [key: string]: BytesValue };

  /**
   * @generated from field: map<uint32, bool> map_uint32_bool = 96;
   */
  mapUint32Bool: { [key: number]: boolean };

  /**
   * @generated from field: map<uint32, string> map_uint32_string = 97;
   */
  mapUint32String: { [key: number]: string };

  /**
   * @generated from field: map<uint32, bytes> map_uint32_bytes = 98;
   */
  mapUint32Bytes: { [key: number]: Uint8Array };

  /**
   * @generated from field: map<uint32, int32> map_uint32_int32 = 99;
   */
  mapUint32Int32: { [key: number]: number };

  /**
   * @generated from field: map<uint32, int64> map_uint32_int64 = 200;
   */
  mapUint32Int64: { [key: number]: bigint };

  /**
   * @generated from field: map<uint32, uint32> map_uint32_uint32 = 201;
   */
  mapUint32Uint32: { [key: number]: number };

  /**
   * @generated from field: map<uint32, uint64> map_uint32_uint64 = 202;
   */
  mapUint32Uint64: { [key: number]: bigint };

  /**
   * @generated from field: map<uint32, float> map_uint32_float = 203;
   */
  mapUint32Float: { [key: number]: number };

  /**
   * @generated from field: map<uint32, double> map_uint32_double = 204;
   */
  mapUint32Double: { [key: number]: number };

  /**
   * @generated from field: map<uint32, cel.expr.conformance.proto3.TestAllTypes.NestedEnum> map_uint32_enum = 205;
   */
  mapUint32Enum: { [key: number]: TestAllTypes_NestedEnum };

  /**
   * @generated from field: map<uint32, cel.expr.conformance.proto3.TestAllTypes.NestedMessage> map_uint32_message = 206;
   */
  mapUint32Message: { [key: number]: TestAllTypes_NestedMessage };

  /**
   * @generated from field: map<uint32, google.protobuf.Duration> map_uint32_duration = 237;
   */
  mapUint32Duration: { [key: number]: Duration };

  /**
   * @generated from field: map<uint32, google.protobuf.Timestamp> map_uint32_timestamp = 238;
   */
  mapUint32Timestamp: { [key: number]: Timestamp };

  /**
   * @generated from field: map<uint32, google.protobuf.NullValue> map_uint32_null_value = 239;
   */
  mapUint32NullValue: { [key: number]: NullValue };

  /**
   * @generated from field: map<uint32, google.protobuf.Any> map_uint32_any = 285;
   */
  mapUint32Any: { [key: number]: Any };

  /**
   * @generated from field: map<uint32, google.protobuf.Struct> map_uint32_struct = 286;
   */
  mapUint32Struct: { [key: number]: JsonObject };

  /**
   * @generated from field: map<uint32, google.protobuf.Value> map_uint32_value = 287;
   */
  mapUint32Value: { [key: number]: Value };

  /**
   * @generated from field: map<uint32, google.protobuf.ListValue> map_uint32_list_value = 288;
   */
  mapUint32ListValue: { [key: number]: ListValue };

  /**
   * @generated from field: map<uint32, google.protobuf.Int64Value> map_uint32_int64_wrapper = 289;
   */
  mapUint32Int64Wrapper: { [key: number]: Int64Value };

  /**
   * @generated from field: map<uint32, google.protobuf.Int32Value> map_uint32_int32_wrapper = 290;
   */
  mapUint32Int32Wrapper: { [key: number]: Int32Value };

  /**
   * @generated from field: map<uint32, google.protobuf.DoubleValue> map_uint32_double_wrapper = 291;
   */
  mapUint32DoubleWrapper: { [key: number]: DoubleValue };

  /**
   * @generated from field: map<uint32, google.protobuf.FloatValue> map_uint32_float_wrapper = 292;
   */
  mapUint32FloatWrapper: { [key: number]: FloatValue };

  /**
   * @generated from field: map<uint32, google.protobuf.UInt64Value> map_uint32_uint64_wrapper = 293;
   */
  mapUint32Uint64Wrapper: { [key: number]: UInt64Value };

  /**
   * @generated from field: map<uint32, google.protobuf.UInt32Value> map_uint32_uint32_wrapper = 294;
   */
  mapUint32Uint32Wrapper: { [key: number]: UInt32Value };

  /**
   * @generated from field: map<uint32, google.protobuf.StringValue> map_uint32_string_wrapper = 295;
   */
  mapUint32StringWrapper: { [key: number]: StringValue };

  /**
   * @generated from field: map<uint32, google.protobuf.BoolValue> map_uint32_bool_wrapper = 296;
   */
  mapUint32BoolWrapper: { [key: number]: BoolValue };

  /**
   * @generated from field: map<uint32, google.protobuf.BytesValue> map_uint32_bytes_wrapper = 297;
   */
  mapUint32BytesWrapper: { [key: number]: BytesValue };

  /**
   * @generated from field: map<uint64, bool> map_uint64_bool = 207;
   */
  mapUint64Bool: { [key: string]: boolean };

  /**
   * @generated from field: map<uint64, string> map_uint64_string = 208;
   */
  mapUint64String: { [key: string]: string };

  /**
   * @generated from field: map<uint64, bytes> map_uint64_bytes = 209;
   */
  mapUint64Bytes: { [key: string]: Uint8Array };

  /**
   * @generated from field: map<uint64, int32> map_uint64_int32 = 210;
   */
  mapUint64Int32: { [key: string]: number };

  /**
   * @generated from field: map<uint64, int64> map_uint64_int64 = 211;
   */
  mapUint64Int64: { [key: string]: bigint };

  /**
   * @generated from field: map<uint64, uint32> map_uint64_uint32 = 212;
   */
  mapUint64Uint32: { [key: string]: number };

  /**
   * @generated from field: map<uint64, uint64> map_uint64_uint64 = 213;
   */
  mapUint64Uint64: { [key: string]: bigint };

  /**
   * @generated from field: map<uint64, float> map_uint64_float = 214;
   */
  mapUint64Float: { [key: string]: number };

  /**
   * @generated from field: map<uint64, double> map_uint64_double = 215;
   */
  mapUint64Double: { [key: string]: number };

  /**
   * @generated from field: map<uint64, cel.expr.conformance.proto3.TestAllTypes.NestedEnum> map_uint64_enum = 216;
   */
  mapUint64Enum: { [key: string]: TestAllTypes_NestedEnum };

  /**
   * @generated from field: map<uint64, cel.expr.conformance.proto3.TestAllTypes.NestedMessage> map_uint64_message = 217;
   */
  mapUint64Message: { [key: string]: TestAllTypes_NestedMessage };

  /**
   * @generated from field: map<uint64, google.protobuf.Duration> map_uint64_duration = 240;
   */
  mapUint64Duration: { [key: string]: Duration };

  /**
   * @generated from field: map<uint64, google.protobuf.Timestamp> map_uint64_timestamp = 241;
   */
  mapUint64Timestamp: { [key: string]: Timestamp };

  /**
   * @generated from field: map<uint64, google.protobuf.NullValue> map_uint64_null_value = 242;
   */
  mapUint64NullValue: { [key: string]: NullValue };

  /**
   * @generated from field: map<uint64, google.protobuf.Any> map_uint64_any = 298;
   */
  mapUint64Any: { [key: string]: Any };

  /**
   * @generated from field: map<uint64, google.protobuf.Struct> map_uint64_struct = 299;
   */
  mapUint64Struct: { [key: string]: JsonObject };

  /**
   * @generated from field: map<uint64, google.protobuf.Value> map_uint64_value = 300;
   */
  mapUint64Value: { [key: string]: Value };

  /**
   * @generated from field: map<uint64, google.protobuf.ListValue> map_uint64_list_value = 301;
   */
  mapUint64ListValue: { [key: string]: ListValue };

  /**
   * @generated from field: map<uint64, google.protobuf.Int64Value> map_uint64_int64_wrapper = 302;
   */
  mapUint64Int64Wrapper: { [key: string]: Int64Value };

  /**
   * @generated from field: map<uint64, google.protobuf.Int32Value> map_uint64_int32_wrapper = 303;
   */
  mapUint64Int32Wrapper: { [key: string]: Int32Value };

  /**
   * @generated from field: map<uint64, google.protobuf.DoubleValue> map_uint64_double_wrapper = 304;
   */
  mapUint64DoubleWrapper: { [key: string]: DoubleValue };

  /**
   * @generated from field: map<uint64, google.protobuf.FloatValue> map_uint64_float_wrapper = 305;
   */
  mapUint64FloatWrapper: { [key: string]: FloatValue };

  /**
   * @generated from field: map<uint64, google.protobuf.UInt64Value> map_uint64_uint64_wrapper = 306;
   */
  mapUint64Uint64Wrapper: { [key: string]: UInt64Value };

  /**
   * @generated from field: map<uint64, google.protobuf.UInt32Value> map_uint64_uint32_wrapper = 307;
   */
  mapUint64Uint32Wrapper: { [key: string]: UInt32Value };

  /**
   * @generated from field: map<uint64, google.protobuf.StringValue> map_uint64_string_wrapper = 308;
   */
  mapUint64StringWrapper: { [key: string]: StringValue };

  /**
   * @generated from field: map<uint64, google.protobuf.BoolValue> map_uint64_bool_wrapper = 309;
   */
  mapUint64BoolWrapper: { [key: string]: BoolValue };

  /**
   * @generated from field: map<uint64, google.protobuf.BytesValue> map_uint64_bytes_wrapper = 310;
   */
  mapUint64BytesWrapper: { [key: string]: BytesValue };

  /**
   * @generated from field: map<string, bool> map_string_bool = 218;
   */
  mapStringBool: { [key: string]: boolean };

  /**
   * @generated from field: map<string, string> map_string_string = 61;
   */
  mapStringString: { [key: string]: string };

  /**
   * @generated from field: map<string, bytes> map_string_bytes = 219;
   */
  mapStringBytes: { [key: string]: Uint8Array };

  /**
   * @generated from field: map<string, int32> map_string_int32 = 220;
   */
  mapStringInt32: { [key: string]: number };

  /**
   * @generated from field: map<string, int64> map_string_int64 = 221;
   */
  mapStringInt64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, uint32> map_string_uint32 = 222;
   */
  mapStringUint32: { [key: string]: number };

  /**
   * @generated from field: map<string, uint64> map_string_uint64 = 223;
   */
  mapStringUint64: { [key: string]: bigint };

  /**
   * @generated from field: map<string, float> map_string_float = 224;
   */
  mapStringFloat: { [key: string]: number };

  /**
   * @generated from field: map<string, double> map_string_double = 225;
   */
  mapStringDouble: { [key: string]: number };

  /**
   * @generated from field: map<string, cel.expr.conformance.proto3.TestAllTypes.NestedEnum> map_string_enum = 226;
   */
  mapStringEnum: { [key: string]: TestAllTypes_NestedEnum };

  /**
   * @generated from field: map<string, cel.expr.conformance.proto3.TestAllTypes.NestedMessage> map_string_message = 227;
   */
  mapStringMessage: { [key: string]: TestAllTypes_NestedMessage };

  /**
   * @generated from field: map<string, google.protobuf.Duration> map_string_duration = 243;
   */
  mapStringDuration: { [key: string]: Duration };

  /**
   * @generated from field: map<string, google.protobuf.Timestamp> map_string_timestamp = 244;
   */
  mapStringTimestamp: { [key: string]: Timestamp };

  /**
   * @generated from field: map<string, google.protobuf.NullValue> map_string_null_value = 245;
   */
  mapStringNullValue: { [key: string]: NullValue };

  /**
   * @generated from field: map<string, google.protobuf.Any> map_string_any = 311;
   */
  mapStringAny: { [key: string]: Any };

  /**
   * @generated from field: map<string, google.protobuf.Struct> map_string_struct = 312;
   */
  mapStringStruct: { [key: string]: JsonObject };

  /**
   * @generated from field: map<string, google.protobuf.Value> map_string_value = 313;
   */
  mapStringValue: { [key: string]: Value };

  /**
   * @generated from field: map<string, google.protobuf.ListValue> map_string_list_value = 314;
   */
  mapStringListValue: { [key: string]: ListValue };

  /**
   * @generated from field: map<string, google.protobuf.Int64Value> map_string_int64_wrapper = 315;
   */
  mapStringInt64Wrapper: { [key: string]: Int64Value };

  /**
   * @generated from field: map<string, google.protobuf.Int32Value> map_string_int32_wrapper = 316;
   */
  mapStringInt32Wrapper: { [key: string]: Int32Value };

  /**
   * @generated from field: map<string, google.protobuf.DoubleValue> map_string_double_wrapper = 317;
   */
  mapStringDoubleWrapper: { [key: string]: DoubleValue };

  /**
   * @generated from field: map<string, google.protobuf.FloatValue> map_string_float_wrapper = 318;
   */
  mapStringFloatWrapper: { [key: string]: FloatValue };

  /**
   * @generated from field: map<string, google.protobuf.UInt64Value> map_string_uint64_wrapper = 319;
   */
  mapStringUint64Wrapper: { [key: string]: UInt64Value };

  /**
   * @generated from field: map<string, google.protobuf.UInt32Value> map_string_uint32_wrapper = 320;
   */
  mapStringUint32Wrapper: { [key: string]: UInt32Value };

  /**
   * @generated from field: map<string, google.protobuf.StringValue> map_string_string_wrapper = 321;
   */
  mapStringStringWrapper: { [key: string]: StringValue };

  /**
   * @generated from field: map<string, google.protobuf.BoolValue> map_string_bool_wrapper = 322;
   */
  mapStringBoolWrapper: { [key: string]: BoolValue };

  /**
   * @generated from field: map<string, google.protobuf.BytesValue> map_string_bytes_wrapper = 323;
   */
  mapStringBytesWrapper: { [key: string]: BytesValue };

  /**
   * @generated from oneof cel.expr.conformance.proto3.TestAllTypes.kind
   */
  kind: {
    /**
     * @generated from field: cel.expr.conformance.proto3.NestedTestAllTypes oneof_type = 400;
     */
    value: NestedTestAllTypes;
    case: "oneofType";
  } | {
    /**
     * @generated from field: cel.expr.conformance.proto3.TestAllTypes.NestedMessage oneof_msg = 401;
     */
    value: TestAllTypes_NestedMessage;
    case: "oneofMsg";
  } | {
    /**
     * @generated from field: bool oneof_bool = 402;
     */
    value: boolean;
    case: "oneofBool";
  } | { case: undefined; value?: undefined };
};

/**
 * Describes the message cel.expr.conformance.proto3.TestAllTypes.
 * Use `create(TestAllTypesSchema)` to create a new message.
 */
export const TestAllTypesSchema: GenMessage<TestAllTypes> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_proto3_test_all_types, 0);

/**
 * @generated from message cel.expr.conformance.proto3.TestAllTypes.NestedMessage
 */
export type TestAllTypes_NestedMessage = Message<"cel.expr.conformance.proto3.TestAllTypes.NestedMessage"> & {
  /**
   * The field name "b" fails to compile in proto1 because it conflicts with
   * a local variable named "b" in one of the generated methods.
   * This file needs to compile in proto1 to test backwards-compatibility.
   *
   * @generated from field: int32 bb = 1;
   */
  bb: number;
};

/**
 * Describes the message cel.expr.conformance.proto3.TestAllTypes.NestedMessage.
 * Use `create(TestAllTypes_NestedMessageSchema)` to create a new message.
 */
export const TestAllTypes_NestedMessageSchema: GenMessage<TestAllTypes_NestedMessage> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_proto3_test_all_types, 0, 0);

/**
 * @generated from enum cel.expr.conformance.proto3.TestAllTypes.NestedEnum
 */
export enum TestAllTypes_NestedEnum {
  /**
   * @generated from enum value: FOO = 0;
   */
  FOO = 0,

  /**
   * @generated from enum value: BAR = 1;
   */
  BAR = 1,

  /**
   * @generated from enum value: BAZ = 2;
   */
  BAZ = 2,
}

/**
 * Describes the enum cel.expr.conformance.proto3.TestAllTypes.NestedEnum.
 */
export const TestAllTypes_NestedEnumSchema: GenEnum<TestAllTypes_NestedEnum> = /*@__PURE__*/
  enumDesc(file_cel_expr_conformance_proto3_test_all_types, 0, 0);

/**
 * This proto includes a recursively nested message.
 *
 * @generated from message cel.expr.conformance.proto3.NestedTestAllTypes
 */
export type NestedTestAllTypes = Message<"cel.expr.conformance.proto3.NestedTestAllTypes"> & {
  /**
   * @generated from field: cel.expr.conformance.proto3.NestedTestAllTypes child = 1;
   */
  child?: NestedTestAllTypes;

  /**
   * @generated from field: cel.expr.conformance.proto3.TestAllTypes payload = 2;
   */
  payload?: TestAllTypes;
};

/**
 * Describes the message cel.expr.conformance.proto3.NestedTestAllTypes.
 * Use `create(NestedTestAllTypesSchema)` to create a new message.
 */
export const NestedTestAllTypesSchema: GenMessage<NestedTestAllTypes> = /*@__PURE__*/
  messageDesc(file_cel_expr_conformance_proto3_test_all_types, 1);

/**
 * This proto tests that global enums are resolved correctly.
 *
 * @generated from enum cel.expr.conformance.proto3.GlobalEnum
 */
export enum GlobalEnum {
  /**
   * @generated from enum value: GOO = 0;
   */
  GOO = 0,

  /**
   * @generated from enum value: GAR = 1;
   */
  GAR = 1,

  /**
   * @generated from enum value: GAZ = 2;
   */
  GAZ = 2,
}

/**
 * Describes the enum cel.expr.conformance.proto3.GlobalEnum.
 */
export const GlobalEnumSchema: GenEnum<GlobalEnum> = /*@__PURE__*/
  enumDesc(file_cel_expr_conformance_proto3_test_all_types, 0);

