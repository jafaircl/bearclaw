{
  "name":  "block_ext",
  "description":  "Tests for cel.block.",
  "section":  [
    {
      "name":  "basic",
      "test":  [
        {
          "name":  "int_add",
          "expr":  "cel.block([1, cel.index(0) + 1, cel.index(1) + 1, cel.index(2) + 1], cel.index(3))",
          "value":  {
            "int64Value":  "4"
          }
        },
        {
          "name":  "size_1",
          "expr":  "cel.block([[1, 2], size(cel.index(0)), cel.index(1) + cel.index(1), cel.index(2) + 1], cel.index(3))",
          "value":  {
            "int64Value":  "5"
          }
        },
        {
          "name":  "size_2",
          "expr":  "cel.block([[1, 2], size(cel.index(0)), 2 + cel.index(1), cel.index(2) + cel.index(1), cel.index(3) + 1], cel.index(4))",
          "value":  {
            "int64Value":  "7"
          }
        },
        {
          "name":  "size_3",
          "expr":  "cel.block([[0], size(cel.index(0)), [1, 2], size(cel.index(2)), cel.index(1) + cel.index(1), cel.index(4) + cel.index(3), cel.index(5) + cel.index(3)], cel.index(6))",
          "value":  {
            "int64Value":  "6"
          }
        },
        {
          "name":  "size_4",
          "expr":  "cel.block([[0], size(cel.index(0)), [1, 2], size(cel.index(2)), [1, 2, 3], size(cel.index(4)), 5 + cel.index(1), cel.index(6) + cel.index(1), cel.index(7) + cel.index(3), cel.index(8) + cel.index(3), cel.index(9) + cel.index(5), cel.index(10) + cel.index(5)], cel.index(11))",
          "value":  {
            "int64Value":  "17"
          }
        },
        {
          "name":  "timestamp",
          "expr":  "cel.block([timestamp(1000000000), int(cel.index(0)), timestamp(cel.index(1)), cel.index(2).getFullYear(), timestamp(50), int(cel.index(4)), timestamp(cel.index(5)), timestamp(200), int(cel.index(7)), timestamp(cel.index(8)), cel.index(9).getFullYear(), timestamp(75), int(cel.index(11)), timestamp(cel.index(12)), cel.index(13).getFullYear(), cel.index(3) + cel.index(14), cel.index(6).getFullYear(), cel.index(15) + cel.index(16), cel.index(17) + cel.index(3), cel.index(6).getSeconds(), cel.index(18) + cel.index(19), cel.index(20) + cel.index(10), cel.index(21) + cel.index(10), cel.index(13).getMinutes(), cel.index(22) + cel.index(23), cel.index(24) + cel.index(3)], cel.index(25))",
          "value":  {
            "int64Value":  "13934"
          }
        },
        {
          "name":  "map_index",
          "expr":  "cel.block([{\"a\": 2}, cel.index(0)[\"a\"], cel.index(1) * cel.index(1), cel.index(1) + cel.index(2)], cel.index(3))",
          "value":  {
            "int64Value":  "6"
          }
        },
        {
          "name":  "nested_map_construction",
          "expr":  "cel.block([{\"b\": 1}, {\"e\": cel.index(0)}], {\"a\": cel.index(0), \"c\": cel.index(0), \"d\": cel.index(1), \"e\": cel.index(1)})",
          "value":  {
            "mapValue":  {
              "entries":  [
                {
                  "key":  {
                    "stringValue":  "a"
                  },
                  "value":  {
                    "mapValue":  {
                      "entries":  [
                        {
                          "key":  {
                            "stringValue":  "b"
                          },
                          "value":  {
                            "int64Value":  "1"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "key":  {
                    "stringValue":  "c"
                  },
                  "value":  {
                    "mapValue":  {
                      "entries":  [
                        {
                          "key":  {
                            "stringValue":  "b"
                          },
                          "value":  {
                            "int64Value":  "1"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "key":  {
                    "stringValue":  "d"
                  },
                  "value":  {
                    "mapValue":  {
                      "entries":  [
                        {
                          "key":  {
                            "stringValue":  "e"
                          },
                          "value":  {
                            "mapValue":  {
                              "entries":  [
                                {
                                  "key":  {
                                    "stringValue":  "b"
                                  },
                                  "value":  {
                                    "int64Value":  "1"
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "key":  {
                    "stringValue":  "e"
                  },
                  "value":  {
                    "mapValue":  {
                      "entries":  [
                        {
                          "key":  {
                            "stringValue":  "e"
                          },
                          "value":  {
                            "mapValue":  {
                              "entries":  [
                                {
                                  "key":  {
                                    "stringValue":  "b"
                                  },
                                  "value":  {
                                    "int64Value":  "1"
                                  }
                                }
                              ]
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              ]
            }
          }
        },
        {
          "name":  "nested_list_construction",
          "expr":  "cel.block([[1, 2, 3, 4], [1, 2], [cel.index(1), cel.index(0)]], [1, cel.index(0), 2, cel.index(0), 5, cel.index(0), 7, cel.index(2), cel.index(1)])",
          "value":  {
            "listValue":  {
              "values":  [
                {
                  "int64Value":  "1"
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "1"
                      },
                      {
                        "int64Value":  "2"
                      },
                      {
                        "int64Value":  "3"
                      },
                      {
                        "int64Value":  "4"
                      }
                    ]
                  }
                },
                {
                  "int64Value":  "2"
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "1"
                      },
                      {
                        "int64Value":  "2"
                      },
                      {
                        "int64Value":  "3"
                      },
                      {
                        "int64Value":  "4"
                      }
                    ]
                  }
                },
                {
                  "int64Value":  "5"
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "1"
                      },
                      {
                        "int64Value":  "2"
                      },
                      {
                        "int64Value":  "3"
                      },
                      {
                        "int64Value":  "4"
                      }
                    ]
                  }
                },
                {
                  "int64Value":  "7"
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "listValue":  {
                          "values":  [
                            {
                              "int64Value":  "1"
                            },
                            {
                              "int64Value":  "2"
                            }
                          ]
                        }
                      },
                      {
                        "listValue":  {
                          "values":  [
                            {
                              "int64Value":  "1"
                            },
                            {
                              "int64Value":  "2"
                            },
                            {
                              "int64Value":  "3"
                            },
                            {
                              "int64Value":  "4"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "1"
                      },
                      {
                        "int64Value":  "2"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "name":  "select",
          "expr":  "cel.block([msg.single_int64, cel.index(0) + cel.index(0)], cel.index(1))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "6"
          }
        },
        {
          "name":  "select_nested_1",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).single_int64, cel.index(1).single_int32, cel.index(2) + cel.index(3), cel.index(4) + cel.index(2), msg.single_int64, cel.index(5) + cel.index(6), cel.index(1).oneof_type, cel.index(8).payload, cel.index(9).single_int64, cel.index(7) + cel.index(10)], cel.index(11))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "31"
          }
        },
        {
          "name":  "select_nested_2",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).oneof_type, cel.index(2).payload, cel.index(3).oneof_type, cel.index(4).payload, cel.index(5).oneof_type, cel.index(6).payload, cel.index(7).single_bool, true || cel.index(8), cel.index(4).child, cel.index(10).child, cel.index(11).payload, cel.index(12).single_bool], cel.index(9) || cel.index(13))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "select_nested_message_map_index_1",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).map_int32_int64, cel.index(2)[1], cel.index(3) + cel.index(3), cel.index(4) + cel.index(3)], cel.index(5))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "15"
          }
        },
        {
          "name":  "select_nested_message_map_index_2",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).map_int32_int64, cel.index(2)[0], cel.index(2)[1], cel.index(3) + cel.index(4), cel.index(2)[2], cel.index(5) + cel.index(6)], cel.index(7))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "8"
          }
        },
        {
          "name":  "ternary",
          "expr":  "cel.block([msg.single_int64, cel.index(0) > 0, cel.index(1) ? cel.index(0) : 0], cel.index(2))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "3"
          }
        },
        {
          "name":  "nested_ternary",
          "expr":  "cel.block([msg.single_int64, msg.single_int32, cel.index(0) > 0, cel.index(1) > 0, cel.index(0) + cel.index(1), cel.index(3) ? cel.index(4) : 0, cel.index(2) ? cel.index(5) : 0], cel.index(6))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "8"
          }
        },
        {
          "name":  "multiple_macros_1",
          "expr":  "cel.block([[1].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) > 0), size([cel.index(0)]), [2].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) > 1), size([cel.index(2)])], cel.index(1) + cel.index(1) + cel.index(3) + cel.index(3))",
          "value":  {
            "int64Value":  "4"
          }
        },
        {
          "name":  "multiple_macros_2",
          "expr":  "cel.block([[1].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) > 0), [cel.index(0)], ['a'].exists(cel.iterVar(0, 1), cel.iterVar(0, 1) == 'a'), [cel.index(2)]], cel.index(1) + cel.index(1) + cel.index(3) + cel.index(3))",
          "value":  {
            "listValue":  {
              "values":  [
                {
                  "boolValue":  true
                },
                {
                  "boolValue":  true
                },
                {
                  "boolValue":  true
                },
                {
                  "boolValue":  true
                }
              ]
            }
          }
        },
        {
          "name":  "multiple_macros_3",
          "expr":  "cel.block([[1].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) > 0)], cel.index(0) && cel.index(0) && [1].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) > 1) && [2].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) > 1))",
          "value":  {
            "boolValue":  false
          }
        },
        {
          "name":  "nested_macros_1",
          "expr":  "cel.block([[1, 2, 3]], cel.index(0).map(cel.iterVar(0, 0), cel.index(0).map(cel.iterVar(1, 0), cel.iterVar(1, 0) + 1)))",
          "value":  {
            "listValue":  {
              "values":  [
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "2"
                      },
                      {
                        "int64Value":  "3"
                      },
                      {
                        "int64Value":  "4"
                      }
                    ]
                  }
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "2"
                      },
                      {
                        "int64Value":  "3"
                      },
                      {
                        "int64Value":  "4"
                      }
                    ]
                  }
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "2"
                      },
                      {
                        "int64Value":  "3"
                      },
                      {
                        "int64Value":  "4"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "name":  "nested_macros_2",
          "expr":  "[1, 2].map(cel.iterVar(0, 0), [1, 2, 3].filter(cel.iterVar(1, 0), cel.iterVar(1, 0) == cel.iterVar(0, 0)))",
          "value":  {
            "listValue":  {
              "values":  [
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "1"
                      }
                    ]
                  }
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "int64Value":  "2"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "name":  "adjacent_macros",
          "expr":  "cel.block([[1, 2, 3], cel.index(0).map(cel.iterVar(0, 0), cel.index(0).map(cel.iterVar(1, 0), cel.iterVar(1, 0) + 1))], cel.index(1) == cel.index(1))",
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "macro_shadowed_variable_1",
          "expr":  "cel.block([x - 1, cel.index(0) > 3], [cel.index(1) ? cel.index(0) : 5].exists(cel.iterVar(0, 0), cel.iterVar(0, 0) - 1 > 3) || cel.index(1))",
          "bindings":  {
            "x":  {
              "value":  {
                "int64Value":  "5"
              }
            }
          },
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "macro_shadowed_variable_2",
          "expr":  "['foo', 'bar'].map(cel.iterVar(1, 0), [cel.iterVar(1, 0) + cel.iterVar(1, 0), cel.iterVar(1, 0) + cel.iterVar(1, 0)]).map(cel.iterVar(0, 0), [cel.iterVar(0, 0) + cel.iterVar(0, 0), cel.iterVar(0, 0) + cel.iterVar(0, 0)])",
          "bindings":  {
            "x":  {
              "value":  {
                "int64Value":  "5"
              }
            }
          },
          "value":  {
            "listValue":  {
              "values":  [
                {
                  "listValue":  {
                    "values":  [
                      {
                        "listValue":  {
                          "values":  [
                            {
                              "stringValue":  "foofoo"
                            },
                            {
                              "stringValue":  "foofoo"
                            },
                            {
                              "stringValue":  "foofoo"
                            },
                            {
                              "stringValue":  "foofoo"
                            }
                          ]
                        }
                      },
                      {
                        "listValue":  {
                          "values":  [
                            {
                              "stringValue":  "foofoo"
                            },
                            {
                              "stringValue":  "foofoo"
                            },
                            {
                              "stringValue":  "foofoo"
                            },
                            {
                              "stringValue":  "foofoo"
                            }
                          ]
                        }
                      }
                    ]
                  }
                },
                {
                  "listValue":  {
                    "values":  [
                      {
                        "listValue":  {
                          "values":  [
                            {
                              "stringValue":  "barbar"
                            },
                            {
                              "stringValue":  "barbar"
                            },
                            {
                              "stringValue":  "barbar"
                            },
                            {
                              "stringValue":  "barbar"
                            }
                          ]
                        }
                      },
                      {
                        "listValue":  {
                          "values":  [
                            {
                              "stringValue":  "barbar"
                            },
                            {
                              "stringValue":  "barbar"
                            },
                            {
                              "stringValue":  "barbar"
                            },
                            {
                              "stringValue":  "barbar"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        {
          "name":  "inclusion_list",
          "expr":  "cel.block([[1, 2, 3], 1 in cel.index(0), 2 in cel.index(0), cel.index(1) && cel.index(2), [3, cel.index(0)], 3 in cel.index(4), cel.index(5) && cel.index(1)], cel.index(3) && cel.index(6))",
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "inclusion_map",
          "expr":  "cel.block([{true: false}, {\"a\": 1, 2: cel.index(0), 3: cel.index(0)}], 2 in cel.index(1))",
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "presence_test",
          "expr":  "cel.block([{\"a\": true}, has(cel.index(0).a), cel.index(0)[\"a\"]], cel.index(1) && cel.index(2))",
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "presence_test_2",
          "expr":  "cel.block([{\"a\": true}, has(cel.index(0).a)], cel.index(1) && cel.index(1))",
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "presence_test_with_ternary",
          "expr":  "cel.block([msg.oneof_type, has(cel.index(0).payload), cel.index(0).payload, cel.index(2).single_int64, cel.index(1) ? cel.index(3) : 0], cel.index(4))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "10"
          }
        },
        {
          "name":  "presence_test_with_ternary_2",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).single_int64, has(cel.index(0).payload), cel.index(2) * 0, cel.index(3) ? cel.index(2) : cel.index(4)], cel.index(5))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "10"
          }
        },
        {
          "name":  "presence_test_with_ternary_3",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).single_int64, has(cel.index(1).single_int64), cel.index(2) * 0, cel.index(3) ? cel.index(2) : cel.index(4)], cel.index(5))",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "int64Value":  "10"
          }
        },
        {
          "name":  "presence_test_with_ternary_nested",
          "expr":  "cel.block([msg.oneof_type, cel.index(0).payload, cel.index(1).map_string_string, has(msg.oneof_type), has(cel.index(0).payload), cel.index(3) && cel.index(4), has(cel.index(1).single_int64), cel.index(5) && cel.index(6), has(cel.index(1).map_string_string), has(cel.index(2).key), cel.index(8) && cel.index(9), cel.index(2).key, cel.index(11) == \"A\", cel.index(10) ? cel.index(12) : false], cel.index(7) ? cel.index(13) : false)",
          "bindings":  {
            "msg":  {
              "value":  {
                "objectValue":  {
                  "@type":  "type.googleapis.com/google.api.expr.test.v1.proto3.TestAllTypes",
                  "singleInt32":  5,
                  "singleInt64":  "3",
                  "oneofType":  {
                    "payload":  {
                      "singleInt32":  8,
                      "singleInt64":  "10",
                      "mapInt32Int64":  {
                        "0":  "1",
                        "1":  "5",
                        "2":  "2"
                      },
                      "mapStringString":  {
                        "key":  "A"
                      }
                    }
                  }
                }
              }
            }
          },
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "optional_list",
          "expr":  "cel.block([optional.none(), [?cel.index(0), ?optional.of(opt_x)], [5], [10, ?cel.index(0), cel.index(1), cel.index(1)], [10, cel.index(2), cel.index(2)]], cel.index(3) == cel.index(4))",
          "bindings":  {
            "opt_x":  {
              "value":  {
                "int64Value":  "5"
              }
            }
          },
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "optional_map",
          "expr":  "cel.block([optional.of(\"hello\"), {?\"hello\": cel.index(0)}, cel.index(1)[\"hello\"], cel.index(2) + cel.index(2)], cel.index(3) == \"hellohello\")",
          "value":  {
            "boolValue":  true
          }
        },
        {
          "name":  "optional_map_chained",
          "expr":  "cel.block([{\"key\": \"test\"}, optional.of(\"test\"), {?\"key\": cel.index(1)}, cel.index(2)[?\"bogus\"], cel.index(0)[?\"bogus\"], cel.index(3).or(cel.index(4)), cel.index(0)[\"key\"], cel.index(5).orValue(cel.index(6))], cel.index(7))",
          "value":  {
            "stringValue":  "test"
          }
        },
        {
          "name":  "optional_message",
          "expr":  "cel.block([optional.ofNonZeroValue(1), optional.of(4), TestAllTypes{?single_int64: cel.index(0), ?single_int32: cel.index(1)}, cel.index(2).single_int32, cel.index(2).single_int64, cel.index(3) + cel.index(4)], cel.index(5))",
          "container":  "google.api.expr.test.v1.proto3",
          "value":  {
            "int64Value":  "5"
          }
        },
        {
          "name":  "call",
          "expr":  "cel.block([\"h\" + \"e\", cel.index(0) + \"l\", cel.index(1) + \"l\", cel.index(2) + \"o\", cel.index(3) + \" world\"], cel.index(4).matches(cel.index(3)))",
          "value":  {
            "boolValue":  true
          }
        }
      ]
    }
  ]
}